{"name": "test_shopcarts[data0]", "status": "broken", "statusDetails": {"message": "TypeError: request() got an unexpected keyword argument 'token'", "trace": "self = <testcase.good_scnter.shopcarts.Test_shopcarts object at 0x1102c3940>\ndata = {'goods': 28, 'nums': 1}\ntoken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxNjg4OTIsInVzZXJuYW1lIjoiMTU4MTk3NDk1NTIiLCJleHAiOjE3NDA2MzkyOTEsImVtYWlsIjpudWxsfQ.-kqrZtacpucHY5ZYT9IJkKiNR94fmXbvPzX72k-rvcE'\nfun = None\n\n    @allure.story('添加商品到购物车')\n    @allure.severity('blocker')\n    @pytest.mark.parametrize('data', base_data.read_data('good_data.yaml')['good'])\n    def test_shopcarts(self, data, token, fun):\n        with allure.step('请求购物车接口'):\n>           result = shopcarts_api(data, token)\n\nshopcarts.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../api/login_api.py:15: in shopcarts_api\n    response = shopcarts(data, token)\n../../common/api_url.py:10: in shopcarts\n    return request('/shopcarts/', 'POST', data=data,token=token)\n../../common/requests.py:19: in request\n    return requests.post(api_root_url + url, **kwargs)\n../../.venv/lib/python3.8/site-packages/requests/api.py:115: in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmethod = 'post', url = 'http://admin.5istudy.online/shopcarts/'\nkwargs = {'data': {'goods': 28, 'nums': 1}, 'json': None, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxNjg4OTIsInVzZXJuYW1lIjoiMTU4MTk3NDk1NTIiLCJleHAiOjE3NDA2MzkyOTEsImVtYWlsIjpudWxsfQ.-kqrZtacpucHY5ZYT9IJkKiNR94fmXbvPzX72k-rvcE'}\nsession = <requests.sessions.Session object at 0x1102c3b20>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the query string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content_type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          >>> req\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\nE           TypeError: request() got an unexpected keyword argument 'token'\n\n../../.venv/lib/python3.8/site-packages/requests/api.py:59: TypeError"}, "steps": [{"name": "请求购物车接口", "status": "broken", "statusDetails": {"message": "TypeError: request() got an unexpected keyword argument 'token'\n", "trace": "  File \"/Users/xiaotuji/PycharmProjects/Meikefresh/testcase/good_scnter/shopcarts.py\", line 18, in test_shopcarts\n    result = shopcarts_api(data, token)\n  File \"/Users/xiaotuji/PycharmProjects/Meikefresh/api/login_api.py\", line 15, in shopcarts_api\n    response = shopcarts(data, token)\n  File \"/Users/xiaotuji/PycharmProjects/Meikefresh/common/api_url.py\", line 10, in shopcarts\n    return request('/shopcarts/', 'POST', data=data,token=token)\n  File \"/Users/xiaotuji/PycharmProjects/Meikefresh/common/requests.py\", line 19, in request\n    return requests.post(api_root_url + url, **kwargs)\n  File \"/Users/xiaotuji/PycharmProjects/Meikefresh/.venv/lib/python3.8/site-packages/requests/api.py\", line 115, in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n  File \"/Users/xiaotuji/PycharmProjects/Meikefresh/.venv/lib/python3.8/site-packages/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n"}, "start": 1740034491902, "stop": 1740034491902}], "attachments": [{"name": "log", "source": "5e1b59f9-6dd1-47c4-a493-57b2397d79f6-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "4077c377-4c10-414c-92f9-ab5bfa736729-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'goods': 28, 'nums': 1}"}], "start": 1740034491901, "stop": 1740034491903, "uuid": "0bbcce72-6b7e-4dd5-9a23-b093f97299db", "historyId": "5818ce833a0e474e15c194eaa6726a37", "testCaseId": "56f43467ded6518cc2693480726d67a6", "fullName": "testcase.good_scnter.shopcarts.Test_shopcarts#test_shopcarts", "labels": [{"name": "epic", "value": "商品管理"}, {"name": "feature", "value": "购物车"}, {"name": "story", "value": "添加商品到购物车"}, {"name": "severity", "value": "blocker"}, {"name": "parentSuite", "value": "testcase.good_scnter"}, {"name": "suite", "value": "shopcarts"}, {"name": "subSuite", "value": "Test_shopcarts"}, {"name": "host", "value": "xiaotujideMacBook-Pro.local"}, {"name": "thread", "value": "61318-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.good_scnter.shopcarts"}]}